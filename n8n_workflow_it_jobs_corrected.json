{
  "name": "HU IT Jobs Scraper - Corrected",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 30 6 * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Daily Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 480]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "profession.hu"
            },
            {
              "name": "url",
              "value": "https://profession.hu/allasok/it"
            }
          ]
        }
      },
      "id": "sources-set",
      "name": "Job Sources",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "nofluffjobs.com"
            },
            {
              "name": "url",
              "value": "https://nofluffjobs.com/hu"
            }
          ]
        }
      },
      "id": "sources-set-2",
      "name": "Job Sources 2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 400]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "cvonline.hu"
            },
            {
              "name": "url",
              "value": "https://cvonline.hu/allasok/it"
            }
          ]
        }
      },
      "id": "sources-set-3",
      "name": "Job Sources 3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 500]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "jobline.hu"
            },
            {
              "name": "url",
              "value": "https://jobline.hu/allasok/it"
            }
          ]
        }
      },
      "id": "sources-set-4",
      "name": "Job Sources 4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 600]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "worki.hu"
            },
            {
              "name": "url",
              "value": "https://worki.hu/allasok/it"
            }
          ]
        }
      },
      "id": "sources-set-5",
      "name": "Job Sources 5",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 700]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "dreamjobs.hu"
            },
            {
              "name": "url",
              "value": "https://dreamjobs.hu/allasok/it"
            }
          ]
        }
      },
      "id": "sources-set-6",
      "name": "Job Sources 6",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 800]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          }
        }
      },
      "id": "http-request",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "job_title_raw",
              "cssSelector": "h2.job-title, .job-title, h3 a, .position-title"
            },
            {
              "key": "company_name",
              "cssSelector": ".company-name, .employer, .company"
            },
            {
              "key": "location_city",
              "cssSelector": ".location, .city, .place"
            },
            {
              "key": "description_raw",
              "cssSelector": ".description, .job-description, .content"
            },
            {
              "key": "salary_raw",
              "cssSelector": ".salary, .wage, .compensation"
            },
            {
              "key": "apply_url",
              "cssSelector": "a[href*='apply'], a[href*='jelentkez'], .apply-link"
            }
          ]
        }
      },
      "id": "html-extract",
      "name": "HTML Extract",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "source",
              "value": "={{ $('Job Sources').item.json.name }}"
            },
            {
              "name": "source_url",
              "value": "={{ $('Job Sources').item.json.url }}"
            },
            {
              "name": "scraped_at",
              "value": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "id": "source-meta-set",
      "name": "Add Source Meta",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Raw to Structured - JavaScript version\nconst items = $input.all();\nconst structuredItems = [];\n\nfor (const item of items) {\n  // Extract basic fields\n  const jobTitleRaw = item.json.job_title_raw || '';\n  const companyName = item.json.company_name || '';\n  const locationCity = item.json.location_city || '';\n  const descriptionRaw = item.json.description_raw || '';\n  const salaryRaw = item.json.salary_raw || '';\n  const applyUrl = item.json.apply_url || '';\n  \n  // Create structured record\n  const structuredItem = {\n    job_title_raw: jobTitleRaw,\n    job_title_norm: jobTitleRaw.trim(),\n    company_name: companyName,\n    location_city: locationCity,\n    location_country: 'HU',\n    description_raw: descriptionRaw,\n    salary_raw: salaryRaw,\n    employment_type: 'full-time',\n    posted_at: new Date().toISOString(),\n    valid_until: '',\n    apply_url: applyUrl,\n    benefits_raw: '',\n    source: item.json.source || '',\n    source_url: item.json.source_url || '',\n    scraped_at: item.json.scraped_at || ''\n  };\n  \n  structuredItems.push(structuredItem);\n}\n\nreturn structuredItems;"
      },
      "id": "js-raw-to-structured",
      "name": "Raw to Structured",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Normalization and Categorization - JavaScript version\nconst items = $input.all();\nconst normalizedItems = [];\n\n// Role categorization mapping\nconst roleMap = {\n  'DevOps': [/\\bdev[-\\s]?ops\\b/i, /kubernetes/i, /terraform/i, /ci\\/?cd/i],\n  'Backend': [/\\bbackend\\b/i, /\\b(java|kotlin|c#|\\.net|python|go|php|node)\\b/i],\n  'Frontend': [/\\bfront[-\\s]?end\\b/i, /(react|angular|vue|typescript)/i],\n  'Full-stack': [/\\bfull[-\\s]?stack\\b/i],\n  'Data/ML': [/\\b(data\\s(engineer|scientist)|machine\\slearning|ml|spark|hadoop)\\b/i],\n  'QA/Testing': [/\\bqa|test(er|ing)|cypress|selenium|playwright\\b/i],\n  'Mobile': [/\\b(android|ios|flutter|react\\s?native)\\b/i],\n  'Security': [/\\b(security|secops|soc|siem)\\b/i],\n  'Cloud': [/\\b(aws|azure|gcp)\\b/i],\n  'UI/UX': [/\\b(ui|ux|product\\sdesigner)\\b/i],\n  'PM/PO': [/\\b(product\\smanager|project\\smanager|product\\sowner)\\b/i],\n  'BA': [/\\b(business\\sanalyst|business\\sanalyst)\\b/i],\n  'SysAdmin/IT Ops': [/\\b(sysadmin|system\\sadmin|it\\sops)\\b/i],\n  'Embedded': [/\\b(embedded|c\\+\\+|microcontroller)\\b/i],\n  'Game': [/\\b(game\\sdeveloper|unity|unreal)\\b/i],\n  'ERP/CRM': [/\\b(erp|crm|sap|salesforce)\\b/i],\n  'Support': [/\\b(support|helpdesk|technical\\ssupport)\\b/i],\n  'Network': [/\\b(network|cisco|routing|switching)\\b/i],\n  'DBA': [/\\b(database\\sadmin|dba|sql\\sserver|oracle)\\b/i]\n};\n\n// Stack keywords\nconst mustStack = ['java','python','go','c#','.net','php','node','react','angular','vue','typescript','kubernetes','docker','aws','azure','gcp','terraform','ansible','kafka','spark','sql','nosql','linux','git','ci/cd'];\n\n// Helper functions\nfunction seniorityOf(text) {\n  const t = text.toLowerCase();\n  if (/\\b(junior|kezd[őo]|pályakezd[őo])\\b/.test(t)) return 'junior';\n  if (/\\b(medior|középhalad[őo]|3-5\\s*év)\\b/.test(t)) return 'medior';\n  if (/\\b(senior|tapasztalt|5\\+?\\s*év)\\b/.test(t)) return 'senior';\n  if (/\\b(lead|principal|architect|vezet[őo])\\b/.test(t)) return 'lead';\n  return 'unspecified';\n}\n\nfunction workModelOf(text) {\n  const t = text.toLowerCase();\n  if (/\\b(remote|táv|home\\s*office)\\b/.test(t)) return 'remote';\n  if (/\\b(hibrid|hybrid)\\b/.test(t)) return 'hybrid';\n  return 'on-site';\n}\n\nfunction salaryParse(text) {\n  const t = text.replace(/\\./g, '').replace(/\\s/g, '');\n  const match = t.match(/(\\d{4,6})(?:-(\\d{4,6}))?\\s*(huf|ft|eur)/i);\n  if (!match) return [null, null, null, 'unknown'];\n  const ccy = match[3].toUpperCase().replace('FT','HUF');\n  const mn = parseInt(match[1]);\n  const mx = parseInt(match[2] || match[1]);\n  const grossnet = /\\b(brutt[óo]|gross)\\b/i.test(text) ? 'gross' : (/\\b(nett[óo]|net)\\b/i.test(text) ? 'net' : 'unknown');\n  return [mn, mx, ccy, grossnet];\n}\n\nfunction roleOf(text) {\n  const t = text.toLowerCase();\n  for (const [role, patterns] of Object.entries(roleMap)) {\n    if (patterns.some(pattern => pattern.test(t))) return role;\n  }\n  return 'Other';\n}\n\nfunction extractStack(text) {\n  const t = text.toLowerCase();\n  const hits = mustStack.filter(kw => t.includes(kw));\n  return [...new Set(hits)].sort();\n}\n\n// Process items\nfor (const item of items) {\n  // Get text for analysis\n  const titleText = (item.json.job_title_raw || '') + ' ' + (item.json.description_raw || '');\n  \n  // Normalize job title\n  const jobTitleNorm = (item.json.job_title_raw || '').trim();\n  \n  // Categorize role\n  const roleCategory = roleOf(titleText);\n  \n  // Determine seniority\n  const seniority = seniorityOf(titleText);\n  \n  // Determine work model\n  const workModel = workModelOf(titleText);\n  \n  // Parse salary\n  const [salaryMin, salaryMax, salaryCurrency, salaryGrossNet] = salaryParse(item.json.salary_raw || '');\n  \n  // Extract tech stack\n  const mustHaveStack = extractStack(titleText);\n  const niceToHaveStack = []; // Could be enhanced with more sophisticated parsing\n  \n  // Determine languages\n  const languages = [];\n  if (/\\b(angol|english|angliai)\\b/i.test(titleText)) languages.push('EN');\n  if (/\\b(német|german|deutsch)\\b/i.test(titleText)) languages.push('DE');\n  if (/\\b(magyar|hungarian)\\b/i.test(titleText)) languages.push('HU');\n  \n  // Create description excerpt\n  let descriptionExcerpt = (item.json.description_raw || '').replace(/<[^>]+>/g, '').trim();\n  descriptionExcerpt = descriptionExcerpt.substring(0, 300);\n  \n  // Create normalized item\n  const normalizedItem = {\n    ...item.json,\n    job_title_norm: jobTitleNorm,\n    role_category: roleCategory,\n    seniority: seniority,\n    work_model: workModel,\n    salary_min: salaryMin,\n    salary_max: salaryMax,\n    salary_currency: salaryCurrency,\n    salary_gross_net: salaryGrossNet,\n    must_have_stack: mustHaveStack.join(', '),\n    nice_to_have_stack: niceToHaveStack.join(', '),\n    languages: languages.join(', '),\n    description_excerpt: descriptionExcerpt,\n    employment_type: 'full-time',\n    contract_type: 'állandó',\n    company_type: 'vállalat',\n    benefits_parsed: ''\n  };\n  \n  normalizedItems.push(normalizedItem);\n}\n\nreturn normalizedItems;"
      },
      "id": "js-normalize-categorize",
      "name": "Normalize & Categorize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate Hash ID - JavaScript version\nconst crypto = require('crypto');\n\n// Helper function\nfunction hashId(company, titleNorm, city, role) {\n  const key = `${(company || '').toLowerCase()}|${(titleNorm || '').toLowerCase()}|${(city || '').toLowerCase()}|${(role || '').toLowerCase()}`;\n  return crypto.createHash('sha256').update(key).digest('hex');\n}\n\n// Process items\nconst items = $input.all();\nconst hashedItems = [];\n\nfor (const item of items) {\n  // Generate hash ID\n  const hashIdValue = hashId(\n    item.json.company_name || '',\n    item.json.job_title_norm || '',\n    item.json.location_city || '',\n    item.json.role_category || ''\n  );\n  \n  // Add hash_id to item\n  const hashedItem = {\n    ...item.json,\n    hash_id: hashIdValue\n  };\n  \n  hashedItems.push(hashedItem);\n}\n\nreturn hashedItems;"
      },
      "id": "js-generate-hash",
      "name": "Generate Hash ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "filePath": "/data/it_jobs_master.xlsx",
        "options": {
          "sheetName": "master"
        }
      },
      "id": "read-master-excel",
      "name": "Read Master Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "jsCode": "// Diff against Master - JavaScript version\nconst scrapedItems = $input.all();\nconst masterItems = $('Read Master Excel').all();\n\n// Create lookup for existing items\nconst existing = {};\nfor (const row of masterItems) {\n  existing[row.json.hash_id] = row.json;\n}\n\nconst outNew = [];\nconst outUpdated = [];\n\nfor (const item of scrapedItems) {\n  const hid = item.json.hash_id;\n  if (!(hid in existing)) {\n    outNew.push(item.json);\n  } else {\n    // Check if key fields changed\n    const changed = ['salary_min', 'salary_max', 'posted_at', 'description_excerpt'].some(\n      k => item.json[k] !== existing[hid][k]\n    );\n    if (changed) {\n      const updatedItem = {\n        ...item.json,\n        updated: true\n      };\n      outUpdated.push(updatedItem);\n    }\n  }\n}\n\nreturn {\n  new: outNew,\n  updated: outUpdated,\n  total_new: outNew.length,\n  total_updated: outUpdated.length\n};"
      },
      "id": "js-diff-master",
      "name": "Diff against Master",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 400]
    },
    {
      "parameters": {
        "filePath": "/data/it_jobs_master.xlsx",
        "options": {
          "sheetName": "master",
          "operation": "upsert",
          "upsertKey": "hash_id"
        }
      },
      "id": "upsert-master-excel",
      "name": "Upsert Master Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "filePath": "/data/it_jobs_daily_{{ $now.format('YYYY-MM-DD') }}.xlsx",
        "options": {
          "sheetName": "daily_{{ $now.format('YYYY-MM-DD') }}",
          "operation": "append"
        }
      },
      "id": "append-daily-excel",
      "name": "Append Daily Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [2220, 400]
    },
    {
      "parameters": {
        "fromEmail": "noreply@yourcompany.com",
        "toEmail": "admin@yourcompany.com",
        "subject": "IT állások – napi összesítő {{ $now.format('YYYY-MM-DD') }}",
        "message": "Napi összesítő:\n\nÚj állások: {{ $('Diff against Master').item.json.total_new }}\nMódosult állások: {{ $('Diff against Master').item.json.total_updated }}\n\nForrások:\n- profession.hu\n- nofluffjobs.com\n- cvonline.hu\n- jobline.hu\n- worki.hu\n- dreamjobs.hu\n\nCsatolmány: napi Excel fájl",
        "attachments": [
          {
            "name": "daily_jobs_{{ $now.format('YYYY-MM-DD') }}.xlsx",
            "data": "={{ $binary.data }}"
          }
        ]
      },
      "id": "send-email-report",
      "name": "Send Email Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [2440, 300]
    },
    {
      "parameters": {
        "webhookUrl": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
        "message": "❌ IT Jobs Scraper Error: {{ $json.error.message }}",
        "options": {}
      },
      "id": "error-slack-webhook",
      "name": "Error Slack Webhook",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [2440, 500]
    }
  ],
  "connections": {
    "Daily Cron Trigger": {
      "main": [
        [
          {
            "node": "Job Sources",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Job Sources",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Job Sources 6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Sources": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Sources 2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Sources 3": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Sources 4": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Sources 5": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Job Sources 6": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTML Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract": {
      "main": [
        [
          {
            "node": "Add Source Meta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Source Meta": {
      "main": [
        [
          {
            "node": "Raw to Structured",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Raw to Structured": {
      "main": [
        [
          {
            "node": "Normalize & Categorize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize & Categorize": {
      "main": [
        [
          {
            "node": "Generate Hash ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Hash ID": {
      "main": [
        [
          {
            "node": "Diff against Master",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Master Excel": {
      "main": [
        [
          {
            "node": "Diff against Master",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Diff against Master": {
      "main": [
        [
          {
            "node": "Upsert Master Excel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append Daily Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Master Excel": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Daily Excel": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
