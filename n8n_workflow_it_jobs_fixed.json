{
  "name": "HU IT Jobs Scraper - Fixed",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 30 6 * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Daily Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 480]
    },
    {
      "parameters": {
        "jsCode": "// TEST MODE: Generate URLs for testing - only profession.hu with 3 pages\nconsole.log('\\n=== TEST MODE: Generating URLs for testing ===');\n\nconst allUrls = [\n  {\n    name: 'profession.hu',\n    url: 'https://profession.hu/allasok/it?kategoria=it',\n    page: 1,\n    portal: 'profession.hu'\n  },\n  {\n    name: 'profession.hu',\n    url: 'https://profession.hu/allasok/it?kategoria=it&oldal=2',\n    page: 2,\n    portal: 'profession.hu'\n  },\n  {\n    name: 'profession.hu',\n    url: 'https://profession.hu/allasok/it?kategoria=it&oldal=3',\n    page: 3,\n    portal: 'profession.hu'\n  }\n];\n\nconsole.log(`Generated ${allUrls.length} URLs for testing`);\nconsole.log('URLs:');\nallUrls.forEach((url, index) => {\n  console.log(`${index + 1}. ${url.name} page ${url.page}: ${url.url}`);\n});\n\nconsole.log('\\n=== END TEST MODE ===\\n');\n\nreturn allUrls;"
      },
      "id": "generate-all-urls",
      "name": "Generate All URLs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          },
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3
          },
          "delay": 1000
        }
      },
      "id": "http-request",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300],
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "// Debug: Log how many URLs are being processed\nconst items = $input.all();\nconsole.log(`\\n=== DEBUG: Processing ${items.length} URLs in this batch ===`);\n\n// Log first few URLs for debugging\nitems.slice(0, 5).forEach((item, index) => {\n  console.log(`${index + 1}. ${item.json.name} - Page ${item.json.page}: ${item.json.url}`);\n});\n\nif (items.length > 5) {\n  console.log(`... and ${items.length - 5} more URLs`);\n}\n\nconsole.log(`\\n=== END DEBUG ===\\n`);\n\n// Return all items unchanged\nreturn items;"
      },
      "id": "debug-urls",
      "name": "Debug URLs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 300]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "job_title_raw",
              "cssSelector": "h2.job-title, .job-title, h3 a, .position-title, .job-title-text, .position-name"
            },
            {
              "key": "company_name",
              "cssSelector": ".company-name, .employer, .company, .company-title, .employer-name"
            },
            {
              "key": "location_city",
              "cssSelector": ".location, .city, .place, .job-location, .workplace"
            },
            {
              "key": "description_raw",
              "cssSelector": ".description, .job-description, .content, .job-content, .position-description"
            },
            {
              "key": "salary_raw",
              "cssSelector": ".salary, .wage, .compensation, .pay, .salary-range"
            },
            {
              "key": "apply_url",
              "cssSelector": "a[href*='apply'], a[href*='jelentkez'], .apply-link, .job-link"
            }
          ]
        }
      },
      "id": "html-extract",
      "name": "HTML Extract",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "source",
              "value": "={{ $json.name }}"
            },
            {
              "name": "source_url",
              "value": "={{ $json.url }}"
            },
            {
              "name": "scraped_at",
              "value": "={{ $now.toISO() }}"
            },
            {
              "name": "page",
              "value": "={{ $json.page }}"
            },
            {
              "name": "portal",
              "value": "={{ $json.portal }}"
            }
          ]
        }
      },
      "id": "source-meta-set",
      "name": "Add Source Meta",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// SIMPLE: Just pass through all data with basic processing\nconsole.log('\\n=== PROCESS DATA SIMPLE ===');\n\nconst items = $input.all();\nconsole.log('Input items count:', items.length);\n\nif (items.length === 0) {\n  console.log('ERROR: No input items received!');\n  return [];\n}\n\n// Just add basic fields to each item and return\nconst processedItems = items.map((item, index) => {\n  console.log(`Processing item ${index + 1}: ${item.json.job_title_raw || 'NO TITLE'}`);\n  \n  return {\n    ...item.json,\n    processed_at: new Date().toISOString(),\n    role_category: 'Other',\n    seniority: 'unspecified',\n    work_model: 'on-site'\n  };\n});\n\nconsole.log(`Returning ${processedItems.length} items`);\nconsole.log('\\n=== END PROCESS DATA SIMPLE ===\\n');\n\nreturn processedItems;"
      },
      "id": "js-process-data",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// TEST: Simple output test\nconsole.log('\\n=== TEST OUTPUT ===');\n\nconst items = $input.all();\nconsole.log('Test Output received:', items.length, 'items');\n\nif (items.length > 0) {\n  console.log('First item keys:', Object.keys(items[0].json));\n  console.log('First item sample:', {\n    source: items[0].json.source,\n    job_title_raw: items[0].json.job_title_raw,\n    company_name: items[0].json.company_name\n  });\n}\n\nconsole.log('\\n=== END TEST OUTPUT ===\\n');\n\nreturn items;"
      },
      "id": "test-output",
      "name": "Test Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "jsCode": "// SIMPLIFIED: Pass through all data without filtering\nconsole.log('\\n=== CHECK EMPTY PAGES SIMPLIFIED ===');\n\nconst items = $input.all();\nconsole.log('Input items count:', items.length);\n\nif (items.length === 0) {\n  console.log('ERROR: No input items received!');\n  return [];\n}\n\n// Log first item for debugging\nconsole.log('First item sample:', {\n  source: items[0].json.source,\n  job_title_raw: items[0].json.job_title_raw,\n  company_name: items[0].json.company_name,\n  description_raw: items[0].json.description_raw ? items[0].json.description_raw.substring(0, 100) + '...' : 'EMPTY'\n});\n\n// Just pass through all items without filtering\nconst processedItems = items.map(item => item.json);\n\nconsole.log(`Passing through ${processedItems.length} items to Excel`);\nconsole.log('\\n=== END CHECK EMPTY PAGES SIMPLIFIED ===\\n');\n\nreturn processedItems;"
      },
      "id": "check-empty-pages",
      "name": "Check Empty Pages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "fileFormat": "xlsx",
        "fileName": "it_jobs_daily_{{ $now.format('YYYY-MM-DD') }}.xlsx",
        "options": {
          "sheetName": "daily_{{ $now.format('YYYY-MM-DD') }}",
          "headerRow": true
        }
      },
      "id": "write-daily-excel",
      "name": "Write Daily Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "operation": "writeToFile",
        "fileFormat": "xlsx",
        "fileName": "it_jobs_daily_{{ $now.format('YYYY-MM-DD') }}.xlsx",
        "options": {
          "sheetName": "daily_{{ $now.format('YYYY-MM-DD') }}",
          "headerRow": true
        }
      },
      "id": "write-daily-excel-v2",
      "name": "Write Daily Excel V2",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "fromEmail": "noreply@yourcompany.com",
        "toEmail": "admin@yourcompany.com",
        "subject": "IT állások – napi összesítő {{ $now.format('YYYY-MM-DD') }}",
        "message": "Napi összesítő (TESZT MÓD):\n\nÚj állások: {{ $('Check Empty Pages').all().length }}\nMódosult állások: 0\n\nForrások (TESZT - csak profession.hu 3 oldal):\n- profession.hu (3 oldal)\n\n⚠️ TESZT MÓD: Csak profession.hu 3 oldala scrapelésre kerül. Ha működik, visszaállíthatjuk az összes portált.\n\nCsatolmány: napi Excel fájl",
        "attachments": [
          {
            "name": "daily_jobs_{{ $now.format('YYYY-MM-DD') }}.xlsx",
            "data": "={{ $binary.data }}"
          }
        ]
      },
      "id": "send-email-report",
      "name": "Send Email Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "Daily Cron Trigger": {
      "main": [
        [
          {
            "node": "Generate All URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Generate All URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate All URLs": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Debug URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug URLs": {
      "main": [
        [
          {
            "node": "HTML Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract": {
      "main": [
        [
          {
            "node": "Add Source Meta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Source Meta": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "Test Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Output": {
      "main": [
        [
          {
            "node": "Check Empty Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Empty Pages": {
      "main": [
        [
          {
            "node": "Write Daily Excel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Write Daily Excel V2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Daily Excel": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Daily Excel V2": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}